library(pheatmap)


mouse.path = "G:\\My Drive\\Postgrad\\PhD\\Projects\\data\\Pijuan_Sala_2019\\other\\atlas_data\\atlas\\"
mouse.data = loadPijuanSala2019(mouse.path,sample=TRUE)

mouse3k = readRDS("G:\\My Drive\\Postgrad\\PhD\\Projects\\scRNAseq-integration\\out\\output_data_samples\\mouse_subset.RDS")
mouse6k = readRDS("G:\\My Drive\\Postgrad\\PhD\\Projects\\scRNAseq-integration\\data\\mouse6k.RDS")

mouse.markers = readRDS("G:\\My Drive\\Postgrad\\PhD\\Projects\\scRNAseq-integration\\data\\markers.rds")

# mouse.mix = subset(mouse3k,cells=names(mouse3k$celltype[
#   mouse3k$celltype %in% c("Forebrain/Midbrain/Hindbrain","Spinal cord","Blood progenitors 1", "Blood progenitors 2",
#                             "Haematoendothelial progenitors",
#                             "Visceral endoderm","Gut","Intermediate mesoderm","Nascent mesoderm",
#                             "Def. endoderm",
#                             "Anterior Primitive Streak")]))

mix.celltypes = c("Forebrain/Midbrain/Hindbrain","Spinal cord","Blood progenitors 1", "Blood progenitors 2",
                  "Haematoendothelial progenitors",
                  "Visceral endoderm","Gut","Intermediate mesoderm","Nascent mesoderm",
                  "ExE endoderm","Parietal endoderm","Rostral neurectoderm",
                  "Endothelium","Def. endoderm","Caudal neurectoderm","Allantois")

mix.celltypes = c("Forebrain/Midbrain/Hindbrain","Spinal cord","Blood progenitors 1", "Blood progenitors 2",
                  "Haematoendothelial progenitors",
                  "Visceral endoderm","Gut","Intermediate mesoderm","Nascent mesoderm",
                  "ExE endoderm","Parietal endoderm")



mouse.mix = subset(mouse3k,cells=names(mouse3k$celltype[
  mouse3k$celltype %in% mix.celltypes]))

mouse.mix = subset(mouse6k,cells=names(mouse6k$celltype[
  mouse6k$celltype %in% mix.celltypes]))


homologs.one2one = readRDS("homologs_one2one.rds")
#dros.homologs = getHomologData(mouse.data$ensembl_ids,"dmelanogaster",mart)
human.homologs = getHomologData(mouse.data$ensembl_ids,"hsapiens",mart)


mparams = c(35,0.3)
mouse.raw = preprocessData(mouse.mix)
mouse.raw = processData(mouse.raw,mouse.data$genes,n_neighbours=mparams[1],
                        min_dist=mparams[2],dims = 1:50,resolution = 1.2)

mouse.filt = filterGenesSeurat(mouse.raw,mouse.data$ensembl_ids,homologs.one2one$ref)
mouse.filt = filterGenesSeurat(mouse.raw,mouse.data$ensembl_ids,
                               human.homologs$one2one.data$ensembl_gene_id)

mouse.one2one = preprocessData(mouse.filt)
mouse.one2one = processData(mouse.one2one,rownames(mouse.one2one),n_neighbours=mparams[1],
                            min_dist=mparams[2],resolution=1.2,dims=1:50)



DimPlot(mouse.raw,reduction="umap",group.by = "celltype",label = TRUE,repel=TRUE) + NoLegend()
DimPlot(mouse.raw,reduction="umap",group.by = "seurat_clusters",label = TRUE,repel=TRUE) + NoLegend()

DimPlot(mouse.one2one,reduction="umap",group.by = "celltype",label = TRUE,repel=TRUE) + NoLegend()
DimPlot(mouse.one2one,reduction="umap",group.by = "seurat_clusters",label = TRUE,repel=TRUE) + NoLegend()


# Contingency matrices -----------------------------------

rind.raw = adj.rand.index(as.numeric(mouse.raw$celltype),
                          mouse.raw$seurat_clusters)
x = table(A=mouse.raw$seurat_clusters,
          B=as.character(mouse.raw$celltype))
col.max <- apply(x,2,which.max)
x2 = x[,names(sort(col.max))]
ggplot(data = melt(x2), aes(x=A, y=B, fill=value)) +
  geom_raster() + xlab("Cluster") +
  ylab("Cell type annotation") +
  scale_x_continuous(breaks=seq(from=0,to=length(levels(mouse.raw$seurat_clusters))-1)) +
  scale_fill_continuous(name = "# cells") +
  ggtitle(paste0("Raw data (Adj Rand index: ",format(round(rind.raw, 3), nsmall = 3)
                 ,")"))


rind.one2one = adj.rand.index(as.numeric(mouse.one2one$celltype),
                              mouse.one2one$seurat_clusters)
y = table(A=mouse.one2one$seurat_clusters,
          B=as.character(mouse.one2one$celltype))
col.max <- apply(y,2,which.max)
y2 = y[,names(sort(col.max))]
ggplot(data = melt(y2), aes(x=A, y=B, fill=value)) +
  geom_raster() + xlab("Cluster") +
  ylab("Cell type annotation") +
  scale_x_continuous(breaks=seq(from=0,to=length(levels(mouse.one2one$seurat_clusters))-1)) +
  scale_fill_continuous(name = "# cells") +
  ggtitle(paste0("One-to-one data (Adj Rand index: ",format(round(rind.one2one, 3), nsmall = 3)
,")"))






# SATSNE ---------------------------------------------

satsne.path = "G:\\My Drive\\Postgrad\\PhD\\Projects\\scRNAseq-integration\\lib\\SATSNE2019\\code\\"

file.sources = list.files(path=satsne.path,pattern="*.R")
for(i in 1:length(file.sources)) {
  source(paste0(satsne.path,file.sources[i]))
}


ngenes = 2000
raw.hvgs = VariableFeatures(mouse.raw)[1:ngenes]
one2one.hvgs = VariableFeatures(mouse.one2one)[1:ngenes]

genes.dupl = as.character(mouse.data$genes[duplicated(mouse.data$genes)])
genes.dupl = c(genes.dupl,"Gm3055.1","Nudt8.1" )

raw.hvgs = raw.hvgs[!(raw.hvgs %in% genes.dupl)]
one2one.hvgs = one2one.hvgs[!(one2one.hvgs %in% genes.dupl)]

mouse.raw_hvgs = filterGenesSeurat(mouse.raw,mouse.data$genes,raw.hvgs,"data")
mouse.one2one_hvgs = filterGenesSeurat(mouse.one2one,rownames(mouse.one2one),one2one.hvgs,"data")

common.hvgs = intersect(raw.hvgs,one2one.hvgs)
common.hvgs = raw.hvgs[raw.hvgs %in% one2one.hvgs]
ncells=891

n1 = dim(mouse.raw_hvgs@meta.data)[1]
n2 = dim(mouse.one2one_hvgs@meta.data)[1]
X1 = GetAssayData(mouse.raw_hvgs,"data")[,1:ncells]
X2 = GetAssayData(mouse.one2one_hvgs,"data")[,1:ncells]
X1shared <- cosine.norm(GetAssayData(mouse.raw_hvgs,"data")[common.hvgs,1:ncells])
X2shared <- cosine.norm(GetAssayData(mouse.one2one_hvgs,"data")[common.hvgs,1:ncells])


tsneX <- satsne_annealing (t(X1),t(X2),t(X1shared),t(X2shared),
                           nk1 = 2,nk2=2,do.plot = TRUE,
                           labels1 = mouse.raw_hvgs$celltype[1:ncells],
                           labels2 = mouse.one2one_hvgs$celltype[1:ncells],
                           perplex_in1 = 250,
                           perplex_fin = 50,perplex_steps = 0.8)


df1<-data.frame(x=tsneX$Y1[,1],y=tsneX$Y1[,2],group=as.factor(mouse.raw_hvgs$celltype[1:ncells]))
p1<-ggplot(df1)+geom_point(aes(x,y,color=group,fill=group)) +coord_fixed(ratio = 1)  + theme(legend.position="right")

df2<-data.frame(x=tsneX$Y2[,1],y=tsneX$Y2[,2],group=as.factor(mouse.one2one_hvgs$celltype[1:ncells]))
p2<-ggplot(df2)+geom_point(aes(x,y,color=group,fill=group))+coord_fixed(ratio = 1) + theme(legend.position="right")

grid.arrange(p1,p2 , nrow = 2 , ncol = 1)







# Split into two datasets
ncells = dim(mouse.mix)[2]
cells1 = colnames(mouse.mix)[sample(1:ncells,ncells/2,replace=FALSE)]
cells2 = colnames(mouse.mix)[!(colnames(mouse.mix)%in% cells1)]
mix1 = subset(mouse.mix,cells=cells1)
mix2 = subset(mouse.mix,cells=cells2)

mix1 = preprocessData(mix1)
mix1 = processData(mix1,mouse.data$genes,n_neighbours=mparams[1],
                        min_dist=mparams[2],dims = 1:50,resolution = 0.8)

mix2 = preprocessData(mix2)
mix2 = processData(mix2,mouse.data$genes,n_neighbours=mparams[1],
                   min_dist=mparams[2],dims = 1:50,resolution = 0.8)
mix1$batch = "mix1"
mix2$batch = "mix2"

DimPlot(mix1,reduction="umap",group.by = "celltype",label = TRUE,repel=TRUE) + NoLegend()
DimPlot(mix2,reduction="umap",group.by = "celltype",label = TRUE,repel=TRUE) + NoLegend()


# Select union of top 2000 hvgs which are one-to-one
mix1.hvgs = VariableFeatures(mix1)
mix2.hvgs = VariableFeatures(mix2)
union.hvgs = union(mix1.hvgs,mix2.hvgs)
union.one2one = intersect(union.hvgs,getGenes(mouse.data,
                                              homologs.one2one$ref))
union.one2one = intersect(union.hvgs,getGenes(mouse.data,
                                              human.homologs$one2one.data$ensembl_gene_id))
union.one2one = union.one2one[1:min(length(union.one2one),2000)]
#Select one-to-one orthologs which are hvgs
mix1sub = filterGenesSeurat(mix1,rownames(mix1),union.one2one,assay = "data")
mix2sub = filterGenesSeurat(mix2,rownames(mix2),union.one2one,assay="data")



# Annotating mix2 using mix1
pred.labels <- SingleR(test=as.SingleCellExperiment(mix2sub), ref=as.SingleCellExperiment(mix1sub),
                labels=mix1sub$celltype, de.method="wilcox")

tab <- table(pred.labels$pruned.labels, as.character(mix2sub$celltype))

p = pheatmap(log2(tab+10), cluster_rows = F,cluster_cols = F,color=colorRampPalette(c("white", "blue"))(101))
  xlab("True labels") + ylab("Predicted labels")



# Correlation
# TODO


# Integrate data
data.list = list(mix1sub,mix2sub)
data.anchors <- FindIntegrationAnchors(object.list = data.list, dims = 1:50,k.anchor=1)
data.intrgtd <- IntegrateData(anchorset = data.anchors, dims = 1:50)

mouse.int <- processData(data.intrgtd,rownames(data.intrgtd),resolution = 1.2,min_dist = 0.2)
DimPlot(mouse.int,reduction="umap",group.by = "celltype",label = TRUE,repel=TRUE) + NoLegend()
DimPlot(mouse.int,reduction="umap",group.by = "seurat_clusters",label = TRUE,repel=TRUE) + NoLegend()
DimPlot(mouse.int,reduction="umap",group.by = "batch",label = TRUE,repel=TRUE) + NoLegend()




#min proportion of cells from each independent cluster in the joint cluster
prop1 = table(A=mouse.int$seurat_clusters[cells1],B=as.character(mix1$celltype))
ncelltype1 = as.vector(t(table(mix1$celltype)))
prop1 = sweep(prop1, 2, ncelltype1[ncelltype1!=0], `/`)

prop2 = table(A=mouse.int$seurat_clusters[cells2],B=as.character(mix2$celltype))
ncelltype2 = as.vector(t(table(mix2$celltype)))
prop2 = sweep(prop2, 2, ncelltype2[ncelltype2!=0], `/`)

n = length(unique(mouse.int$celltype))
overlap = outer(1:n,1:n,
       FUN = Vectorize(function(i,j) {sum(pmin(prop1[,i],prop2[,j]) )}))
colnames(overlap) = levels(mouse.mix$celltype)[ncelltype1!=0]
rownames(overlap) = levels(mouse.mix$celltype)[ncelltype1!=0]


rind1 = adj.rand.index(as.numeric(mix1$celltype),mouse.int$seurat_clusters[cells1])
rind2 = adj.rand.index(as.numeric(mix2$celltype),mouse.int$seurat_clusters[cells2])
avg.rind = mean(rind1,rind2)

# Cluster overlap plot
ggplot(data = melt(overlap), aes(x=Var1, y=Var2, fill=value)) +
  geom_raster() +
  ylab("Cell type annotation")  +
  scale_fill_continuous(name = "Cluster overlap") +
  theme(axis.title.x=element_blank(),
        axis.text.x = element_text(angle = 90, hjust = 1)) +
  ggtitle(paste0("Mean adj. rand index: ", format(round(avg.rind, 3))))





# ---------------------------------------------


#SATSNE integration
ncells = 445

int.hvgs = intersect(mix1.hvgs,mix2.hvgs)
int.one2one = intersect(int.hvgs,getGenes(mouse.data,
                                          homologs.one2one$ref))
int.one2one = intersect(int.hvgs,getGenes(mouse.data,
                                          dros.homologs$one2one.data$ensembl_gene_id))
int.one2one = int.one2one[1:min(length(int.one2one),2000)]



mix1hvgs = filterGenesSeurat(mix1,rownames(mix1),mix1.hvgs,assay = "data")
mix2hvgs = filterGenesSeurat(mix2,rownames(mix2),mix2.hvgs,assay="data")

n1 = dim(mix1hvgs@meta.data)[1]
n2 = dim(mix2hvgs@meta.data)[1]
X1 = GetAssayData(mix1hvgs,"data")[,1:ncells]
X2 = GetAssayData(mix2hvgs,"data")[,1:ncells]
X1shared <- cosine.norm(GetAssayData(mix1hvgs,"data")[int.one2one,1:ncells])
X2shared <- cosine.norm(GetAssayData(mix2hvgs,"data")[int.one2one,1:ncells])


tsneX <- satsne_annealing (t(X1),t(X2),t(X1shared),t(X2shared),
                           nk1 = 1,nk2=1,do.plot = TRUE,
                           labels1 = mix1hvgs$celltype[1:ncells],
                           labels2 = mix2hvgs$celltype[1:ncells],
                           perplex_in1 = 250,
                           perplex_fin = 50,perplex_steps = 0.8)



df1<-data.frame(x=tsneX$Y1[,1],y=tsneX$Y1[,2],group=as.factor(mix1hvgs$celltype[1:ncells]))
df2<-data.frame(x=tsneX$Y2[,1],y=tsneX$Y2[,2],group=as.factor(mix2hvgs$celltype[1:ncells]))

df1$batch = "mix1"
df2$batch = "mix2"

comb.df = rbind(df1,df2)
ggplot(comb.df)+geom_point(aes(x,y,color=group,fill=group))+coord_fixed(ratio = 1) + theme(legend.position="right")
ggplot(comb.df)+geom_point(aes(x,y,color=batch,fill=batch))+coord_fixed(ratio = 1) + theme(legend.position="right")

p1<-ggplot(df1)+geom_point(aes(x,y,color=group,fill=group)) +coord_fixed(ratio = 1)  + theme(legend.position="right")
p2<-ggplot(df2)+geom_point(aes(x,y,color=group,fill=group))+coord_fixed(ratio = 1) + theme(legend.position="right")
grid.arrange(p1,p2 , nrow = 2 , ncol = 1)


# -------------------------------------------------



#TODO: order rows so that diagonal
y = table(A=mouse.int$seurat_clusters[cells1],B=as.character(mix1$celltype))
ggplot(data = melt(y), aes(x=A, y=B, fill=value)) +
  geom_raster() + xlab("Cluster") +
  ylab("Cell type annotation") +
  scale_x_continuous(breaks=seq(from=0,to=length(levels(mouse.int$seurat_clusters))-1)) +
  scale_fill_continuous(name = "# cells")

y = table(A=mouse.int$seurat_clusters[cells2],B=as.character(mix2$celltype))
ggplot(data = melt(y), aes(x=A, y=B, fill=value)) +
  geom_raster() + xlab("Cluster") +
  ylab("Cell type annotation") +
  scale_x_continuous(breaks=seq(from=0,to=length(levels(mouse.int$seurat_clusters))-1)) +
  scale_fill_continuous(name = "# cells")





# mouse.one2one = processData(mouse.one2one,getGenes(mouse.data,c(homologs.one2one$ref,"ENSMUSG00000004885","ENSMUSG00000047632","ENSMUSG00000021850","ENSMUSG00000027239","ENSMUSG00000087658","ENSMUSG00000026547","ENSMUSG00000025196","ENSMUSG00000000184","ENSMUSG00000028645","ENSMUSG00000021848","ENSMUSG00000024619","ENSMUSG00000046402","ENSMUSG00000017491")),n_neighbours=mparams[1],min_dist=mparams[2])

# data = ScaleData(mouse.one2one)
# data <- RunPCA(data, features = c(VariableFeatures(object = data),
#                                   markers))
# data <- RunUMAP(data, reduction = "pca", dims = 1:35,n.components = 3L,n.neighbors =30,min.dist = 0.5 )
# data <- FindNeighbors(data, dims = 1:35)
# data <- FindClusters(data,resolution = 0.8)



mart = useMart("ensembl", dataset = "mmusculus_gene_ensembl")
human.homologs = getBM(attributes = c("ensembl_gene_id", "external_gene_name",
                                      "hsapiens_homolog_ensembl_gene",
                                      "hsapiens_homolog_associated_gene_name",
                                      "hsapiens_homolog_orthology_type"),
                       filters = "ensembl_gene_id",
                       values = mouse.data$ensembl_ids,
                       mart = mart)
human.one2one = human.homologs[human.homologs[,"hsapiens_homolog_orthology_type"
                                              ] == "ortholog_one2one",]
mouse.human = filterGenesSeurat(mouse.raw,mouse.data$ensembl_ids,human.one2one$ensembl_gene_id)
mouse.human = preprocessData(mouse.human)
mouse.human = processData(mouse.human,getGenes(mouse.data,human.one2one$ensembl_gene_id),n_neighbours=mparams[1],
                            min_dist=mparams[2])



DimPlot(mouse.human,reduction="umap",group.by = "celltype",label = TRUE,repel=TRUE) + NoLegend()








# Exploring one-to-one hvg rankings
spinal.cells = names(mouse.one2one_hvgs$celltype[mouse.one2one_hvgs$celltype == "Spinal cord"])
spinal.cells = spinal.cells[!is.na(spinal.cells)]
spinal.hvgs = FindMarkers(mouse.one2one_hvgs, ident.1 = spinal.cells, ident.2=NULL)

brain.cells = names(mouse.one2one_hvgs$celltype[mouse.one2one_hvgs$celltype == "Forebrain/Midbrain/Hindbrain"])
brain.cells = brain.cells[!is.na(brain.cells)]
brain.hvg_data = FindMarkers(mouse.raw_hvgs, ident.1 = brain.cells, ident.2=NULL,only.pos = TRUE)
brain.hvgs = rownames(brain.hvg_data)

markers = FindMarkers(mouse.raw, ident.1 = spinal.cells, ident.2=brain.cells,features=raw.hvgs)
markers = rownames(markers)

x.common = match(common.hvgs,raw.hvgs)
y.common= match(common.hvgs,one2one.hvgs)

x.raw = match(raw.hvgs[!(raw.hvgs %in% common.hvgs)],raw.hvgs)
y.one2one = match(one2one.hvgs[!(one2one.hvgs %in% common.hvgs)],one2one.hvgs)

brain.commonx= match(brain.hvgs,raw.hvgs)
brain.commony= match(brain.hvgs,one2one.hvgs)

brain.raw = match(brain.hvgs[((brain.hvgs %in% raw.hvgs) & !(brain.hvgs %in% common.hvgs))],raw.hvgs)
brain.one2one = match(brain.hvgs[(!(brain.hvgs %in% common.hvgs) & (brain.hvgs %in% one2one.hvgs))],one2one.hvgs)

ggplot() + geom_point(aes(x=x.common,y=y.common),size=0.001) + xlim(-1,2000) +
  ylim(-1,2000) +
  geom_line(aes(x=seq(1,2000,1),y=seq(1,2000,1)),linetype="dashed") +
  geom_point(aes(x=x.raw,y=-1),colour="red",size=0.001) +
  geom_point(aes(x=-1,y=y.one2one),colour="blue",size=0.001) +
  xlab("Raw HVG ranking") + ylab("One-to-one HVG ranking") +
  geom_point(aes(x=brain.commonx,y=brain.commony),colour="green",size=0.001) +
  geom_point(aes(x=brain.raw,y=-1),colour="green",size=0.001) +
  geom_point(aes(x=-1,y=brain.one2one),colour="green",size=0.001)
